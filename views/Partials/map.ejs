<script>
  //CJ- Variable to keep track of the open info window
  let currentInfoWindow = null;
  //CJ- array to store events for random button
  let events = [];
  //  CJ- using callback function “initMap” from Google Map Script API URL.  This ensures the javascript will only run once the API has finished loading, otherwise it would run before map exists.
  function initMap() {
    // <!-- CJ- targeting "map-div" to load map -->
    map = new google.maps.Map(document.getElementById("map-div"), {
      // CJ- loads map at specific lattitude and longitude
      center: { lat: 53.349076911151386, lng: -6.242441879918039 },
      // CJ- defines the zoom level
      zoom: 14,
      // CJ- mapId is the id of the map created in Google Cloud Platform
      mapId: "13185b1ffbbba3af",
      //CJ- remove default map controls from map
      mapTypeControl: false,
      fullscreenControl: false,
      streetViewControl: false,
    });

    //CJ- variable to keep track of the current filter
    var currentFilter = null;

    //CJ- variable to keep track of all markers
    var markers = [];

    //CJ- Hardcoded markers and info windows for events
    //CJ- Function to handle marker click events
    function handleMarkerClick(marker, infowindow) {
      return function () {
        // Close the current info window if it's open
        if (currentInfoWindow) {
          currentInfoWindow.close();
        }

        // CJ- open info window on map at marker location
        infowindow.open(map, marker);

        // Set the current info window to the newly opened one
        currentInfoWindow = infowindow;
      };
    }

    //CJ- Dynamic JSON data for markers and info windows
    //CJ- Function to get the icon URL based on the event type
    function getIconUrl(eventType, eventTime) {
      //CJ- Create a new image object
      var icon = new Image();
      //CJ- Add an onload event listener to the image object
      icon.onload = function () {
        //CJ- The image has been loaded
      };

      // CJ- Create a variable to store the time category
      var timeCategory;
      // CJ- Get the current time in milliseconds
      var currentTime = new Date().getTime();
      // CJ- Get the event start time in milliseconds
      var eventStartTime = new Date(eventTime).getTime();
      // CJ- Calculate the time difference in hours
      var timeDifference = (eventStartTime - currentTime) / (1000 * 60 * 60);

      // CJ- Determine the time category based on the time difference
      if (timeDifference < 16) {
        // CJ- Event is starting in less than 8 hours
        timeCategory = "starting_soonest";
      } else if (timeDifference < 24) {
        // CJ- Event is starting in between 8 and 16 hours
        timeCategory = "starting_in_between";
      } else {
        // CJ- Event is starting in more than 16 hours
        timeCategory = "starting_furthest_away";
      }

      //CJ- switch statement to return the icon URL based on the event type
      switch (eventType) {
        //CJ- case statement for each event type
        case "Charity":
          //CJ- switch statement to return the icon URL based on the time category
          switch (timeCategory) {
            case "starting_soonest":
              return "ChS.png";
            case "starting_in_between":
              return "ChO.png";
            case "starting_furthest_away":
              return "ChE.png";
          }
          break;
        case "Cultural":
          switch (timeCategory) {
            case "starting_soonest":
              return "CuS.png";
            case "starting_in_between":
              return "CuO.png";
            case "starting_furthest_away":
              return "CuE.png";
          }
          break;
        case "Education":
          switch (timeCategory) {
            case "starting_soonest":
              return "EdS.png";
            case "starting_in_between":
              return "EdO.png";
            case "starting_furthest_away":
              return "EdE.png";
          }
          break;
        case "Entertainment":
          switch (timeCategory) {
            case "starting_soonest":
              return "EnS.png";
            case "starting_in_between":
              return "EnO.png";
            case "starting_furthest_away":
              return "EnE.png";
          }
          break;
        case "Social":
          switch (timeCategory) {
            case "starting_soonest":
              return "SoS.png";
            case "starting_in_between":
              return "SoO.png";
            case "starting_furthest_away":
              return "SoE.png";
          }
          break;
        case "Sports":
          switch (timeCategory) {
            case "starting_soonest":
              return "SpS.png";
            case "starting_in_between":
              return "SpO.png";
            case "starting_furthest_away":
              return "SpE.png";
          }
          //CJ- default case for any other event type
          break;
        default:
          //CJ- return the default icon URL
          icon.src = "Crosshair.png";
      }
      //CJ- return the icon URL
      return icon.src;
    }

    //CJ- Multiple Markers with Info Windows from JSON Data
    fetch("/eventsData.json")
      .then((response) => response.json())
      .then((data) => {
        const clonedEventData = JSON.parse(JSON.stringify(data));
        clonedEventData.forEach((eventData, index) => {
          const marker = new google.maps.Marker({
            position: { lat: eventData.lat, lng: eventData.lon },
            map,
            title: eventData.eventName,
            icon: {
              url: getIconUrl(eventData.eventType, eventData.eventTime),
              scaledSize: new google.maps.Size(48, 48),
            },
            animation: google.maps.Animation.DROP,
            eventType: eventData.eventType,
            groupLink: eventData.groupLink,
            groupName: eventData.groupName,
          });

          // Add a click event listener to each marker
          marker.addListener("click", function () {
            // Here, 'this' refers to the marker instance that was clicked
            console.log(this.title); // This will log the title of the clicked marker
            // Add your code to handle the click event here
          });

          //CJ- Add the marker to the markers array
          markers.push(marker);

          //CJ- Create an info window for the event
          window.expandText = function (id) {
            //CJ- display the hidden text
            document.getElementById(id).style.display = "inline";
            //CJ- hide the read more button
            document.getElementById("btn-" + id).style.display = "none";
            //CJ- display the collapse button
            document.getElementById("collapse-btn-" + id).style.display =
              "inline";
          };

          // CJ- Function to handle the click event of the Collapse button
          window.collapseText = function (id) {
            //CJ- hide the extra text
            document.getElementById(id).style.display = "none";
            //CJ- display the read more button
            document.getElementById("btn-" + id).style.display = "inline";
            //CJ- hide the collapse button
            document.getElementById("collapse-btn-" + id).style.display =
              "none";
          };
          // CJ- Create an info window for the event
          const infowindow = new google.maps.InfoWindow({
            //CJ- div class to style info window content
            content: `
                  <div class="info-window-content">
                    <div class="text-container">
                      <h3>${eventData.eventName}</h3>
                      <div class="event-type-container">
                        <p><strong>Type:</strong></p>
                        <button class="toggle-btn" onclick="window.filterEvents('${
                          eventData.eventType
                        }')">${eventData.eventType}</button>

                      </div>
                      <p><strong>Group Name:</strong> ${eventData.groupName}</p>
                      <p><strong>Start Time:</strong> ${new Date(
                        eventData.eventTime
                      ).toLocaleString()}</p>
                      <p><strong>End Time:</strong> ${new Date(
                        eventData.eventEndTime
                      ).toLocaleString()}</p>
                      <p><strong>Location:</strong> ${
                        eventData.locationInfo
                      }</p> <!-- Location info -->
                      <p>${eventData.eventDetails.substring(
                        0,
                        100
                      )} <!-- Displays the first 100 characters -->
                          <span id="extra-text-${
                            eventData.eventId
                          }" class="extra-text">${eventData.eventDetails.substring(
              100
            )}</span>
                          <button id="btn-extra-text-${
                            eventData.eventId
                          }" class="expand-collapse-btn" onclick="window.expandText('extra-text-${
              eventData.eventId
            }');">Read more</button>
                          <button id="collapse-btn-extra-text-${
                            eventData.eventId
                          }" class="expand-collapse-btn" style="display: none;" onclick="window.collapseText('extra-text-${
              eventData.eventId
            }');">Collapse</button>
                      </p>
                    </div>
                    <div class="image-source-container">
                      <img src="${eventData.eventImage}" alt="Event Image">
                      <div class="btn-container">
                        <a href="https://www.google.com/maps/dir//${
                          eventData.lat
                        },${
              eventData.lon
            }" target="_blank" class="directions-btn">Directions</a>
                        <a href="${
                          eventData.eventUrl
                        }" target="_blank" class="source-btn">Source</a>
                        <a href="#" id="follow-btn-${
                          eventData.eventId
                        }" onclick="event.preventDefault(); handleFollowClick('${
              eventData.eventName
            }');" class="follow-btn">Follow</a>
                </div>
                    </div>
                `,
          });

          // When calling the follow function
          window.handleFollowClick = function (eventName) {
            const selectedEvent = Object.values(clonedEventData).find(
              (event) => event.eventName === eventName
            );
            follow(selectedEvent);
          };
          function follow(event) {
            // Fix the function parameter name conflict
            // Get the user email
            const email = userEmail;
            // Get the group name and link
            const groupName = event.groupName; // Fix the variable name
            const groupLink = event.groupLink; // Fix the variable name

            console.log(`Group name: ${groupName}`); // Log the group name
            console.log(`Group link: ${groupLink}`); // Log the group link

            // Use fetch to send the form data to the server
            fetch("/followGroup", {
              // Set the method to POST
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              // Set the body of the request to the form data
              body: JSON.stringify({ email, groupName, groupLink }),
            })
              // Parse the response as JSON
              .then((response) => response.json())
              .then((data) => {
                console.log("Server response:", data); // Log the server response
                // If the response is successful
                if (data.success) {
                  // Alert the user that the group has been followed
                  console.log("The group has been followed!");
                  // Get the followed groups list
                  const followedGroupsList =
                    document.getElementById("followedGroupsList");
                  // Check if the followed groups list is empty
                  if (!followedGroupsList.hasChildNodes()) {
                    // Create a new li element
                    const noGroupsMessage = document.createElement("li");
                    // Set the text of the new li element
                    noGroupsMessage.textContent = "Not following any groups";
                    // Append the new li element to the ul
                    followedGroupsList.appendChild(noGroupsMessage);
                  }
                  // Create a new li element
                  const newGroup = document.createElement("li");
                  // Create a new anchor element
                  const groupLinkElement = document.createElement("a");
                  // Set the href of the anchor element to the group link
                  groupLinkElement.href = groupLink;
                  // Set the text of the anchor element to the group name
                  groupLinkElement.textContent = groupName;
                  // Append the anchor element to the li element
                  newGroup.appendChild(groupLinkElement);
                  // Append the new li element to the ul
                  followedGroupsList.appendChild(newGroup);
                } else {
                  // Alert the user that the group is already being followed
                  console.log("The user is already following this group.");
                }
              })
              // Catch any errors and log them to the console
              .catch((error) => {
                console.error("Error:", error);
              });
          }
          // Add a listener for the 'domready' event
          google.maps.event.addListener(infowindow, "domready", function () {
            //CJ- Get the follow button for the event
            var followButton = document.getElementById(
              "follow-btn-" + eventData.eventId
            );
            let userEmail;
            // Check the login status and update the button display
            fetch("/isLoggedIn")
              .then((response) => response.json())
              .then((data) => {
                isLoggedIn = data.isLoggedIn;
                console.log(`Login status: ${isLoggedIn}`);
                if (isLoggedIn) {
                  userEmail = data.accounts[0].email;
                  followButton.style.display = "block";
                } else {
                  followButton.style.display = "none";
                }
                console.log(`Login status: ${isLoggedIn}`);
                console.log(`User email: ${userEmail}`);
              });
          });
          //CJ- moves marker and info window to events array
          events.push({
            marker: marker,
            infowindow: infowindow,
          });
          // CJ- Add an event listener to the marker to open the info window
          marker.addListener("click", () => {
            // Close the current info window if it's open
            if (currentInfoWindow) {
              currentInfoWindow.close();
            }
            //CJ- open the info window on the map at the marker location
            infowindow.open(map, marker);

            // CJ- Set the current info window to the newly opened one
            currentInfoWindow = infowindow;
          });
        });
      })
      //CJ- log error to console
      .catch((error) => {
        //CJ- log error to console
        console.error("Error fetching JSON data:", error);
      });

    //CJ- click event listener added to the map to close the info window when the map is clicked
    map.addListener("click", function () {
      if (currentInfoWindow) {
        currentInfoWindow.close();
      }
    });

    //CJ- Adds a click event listener to the random button to display a random event info window
    //CJ- SelectS the button inside the div with class 'randomTest'
    // let btn = document.querySelector(".randomTest button");
    let btn = document.querySelector("button.item.random");
    //CJ- Add a click event listener to the button
    btn.addEventListener("click", function () {
      // CJ- Select a random index from the events array to display an event
      let index = Math.floor(Math.random() * events.length);
      // CJ- Close the currently open info window if there is one
      if (currentInfoWindow) {
        currentInfoWindow.close();
      }
      //CJ- Open the info window for the random event
      events[index].infowindow.open(map, events[index].marker);
      //CJ- Set the current info window to the newly opened one
      currentInfoWindow = events[index].infowindow;
      //CJ- Center the map on the location of the random event
      map.setCenter(events[index].marker.getPosition());
    });
    //CJ- click event listener added to the map to close the info window when the map is clicked
    map.addListener("click", function () {
      if (currentInfoWindow) {
        currentInfoWindow.close();
      }
    });

    //CJ- Function to filter the events based on the event type
    window.filterEvents = function (eventType) {
      //CJ- If the current filter is the same as the clicked event type, remove the filter
      if (currentFilter === eventType) {
        //CJ- Set the current filter to null
        currentFilter = null;
        //CJ- Show all markers
        markers.forEach((marker) => {
          //CJ- Set the marker to be visible
          marker.setVisible(true);
        });
      } else {
        //CJ- If the current filter is not the same as the clicked event type, set the current filter to the clicked event type
        currentFilter = eventType;
        //CJ- Hide all markers that do not match the current filter
        markers.forEach((marker) => {
          //CJ- Set the marker to be visible if the event type matches the current filter
          marker.setVisible(marker.eventType === currentFilter);
        });
      }
    };

    // CJ- Check if geolocation is available
    if (navigator.geolocation) {
      // CJ- Get user's location
      navigator.geolocation.getCurrentPosition(
        // CJ- Success callback
        (position) => {
          // CJ- Create an object to store user's location
          const userLocation = {
            // CJ- Get user's latitude and longitude
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };

          //CJ- TO-DO- get city from userLocation (lat/long) and store as global variable

          // CJ- Center the map to user's location
          map.setCenter(userLocation);
          // CJ- Add a marker for user's location
          const userMarker = new google.maps.Marker({
            // CJ- Set the position of the marker to user's location
            position: userLocation,
            // CJ- Set the map to the map object
            map,
            // CJ- Set the title of the marker
            title: "Your Location",
            icon: {
              url: "user.png",
              scaledSize: new google.maps.Size(48, 48),
            },
            animation: google.maps.Animation.DROP,
          });
        },
        // CJ- Error handling
        (error) => {
          // CJ- Log error to console
          console.error("Error getting user's location:", error);
        }
      );
    } else {
      console.error("Geolocation is not supported by this browser.");
    }
  }
</script>
